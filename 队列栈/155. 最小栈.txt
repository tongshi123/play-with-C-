/*
155. 最小栈
借助另外一个栈来存储每次push入新元素之后的栈的最小值
*/

class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    
    void push(int x) {
        if(min_stack.empty()){
            
            min_stack.push(x);
        }
        else{
            if(min_stack.top() < x){
                min_stack.push(min_stack.top());
            }
            else{
                min_stack.push(x);
            }
        }  
        m_stack.push(x); 
    }
    
    void pop() {			//同时删除两个栈的栈顶元素
        m_stack.pop();
        min_stack.pop();
    }
    
    int top() {
        return m_stack.top();
    }
    
    int getMin() {
     return  min_stack.top();
    }
private:
    stack<int> m_stack;
    stack<int> min_stack;
};

